Install Percona Distribution for PostgreSQL on Red Hat Enterprise Linux and derivatives¶
This document describes how to install Percona Distribution for PostgreSQL from Percona repositories on RPM-based distributions such as Red Hat Enterprise Linux and compatible derivatives. Read more about Percona repositories.

Platform specific notes¶
Depending on what operating system you are using, you may need to enable or disable specific modules to install Percona Distribution for PostgreSQL packages and to resolve dependencies conflicts for its specific components.

For Percona Distribution for PostgreSQL packages¶

CentOS 7
RHEL8/Oracle Linux 8/Rocky Linux 8
Install the epel-release package:


$ sudo yum -y install epel-release
$ sudo yum repolist

For percona-postgresql17-devel package¶
You may need to install the percona-postgresql17-devel package when working with some extensions or creating programs that interface with PostgreSQL database. This package requires dependencies that are not part of the Distribution, but can be installed from the specific repositories:


RHEL8
Rocky Linux 8
Oracle Linux 8
Rocky Linux 9
Oracle Linux 9

$ sudo yum --enablerepo=codeready-builder-for-rhel-8-rhui-rpms install perl-IPC-Run -y

For percona-patroni package¶
To install Patroni on Red Hat Enterprise Linux 9 and compatible derivatives, enable the epel repository


$ sudo yum install epel-release
For pgpool2 extension¶
To install pgpool2 on Red Hat Enterprise Linux and compatible derivatives, enable the codeready builder repository first to resolve dependencies conflict for pgpool2.

The following are commands for Red Hat Enterprise Linux 9 and derivatives. For Red Hat Enterprise Linux 8, replace the operating system version in the commands accordingly.


RHEL 9
Rocky Linux 9
Oracle Linux 9

$ sudo dnf config-manager --set-enabled codeready-builder-for-rhel-9-x86_64-rpms

For PostGIS¶
For Red Hat Enterprise Linux 8 and derivatives, replace the operating system version in the following commands accordingly.


RHEL 9
Rocky Linux 9
Oracle Linux 9
RHEL UBI 9
Run the following commands:

Install epel repository


$ sudo yum install epel-release
Enable the llvm-toolset dnf module


$ sudo dnf module enable llvm-toolset
Enable the codeready builder repository to resolve dependencies conflict.


$ sudo dnf config-manager --set-enabled codeready-builder-for-rhel-9-x86_64-rpms

Procedure¶
Run all the commands in the following sections as root or using the sudo command:

Install dependencies¶
Install curl for Telemetry. We use it to better understand the use of our products and improve them.


$ sudo yum -y install curl
Configure the repository¶
Install the percona-release repository management tool to subscribe to Percona repositories:


$ sudo yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm
Enable the repository

Percona provides two repositories for Percona Distribution for PostgreSQL. We recommend enabling the Major release repository to timely receive the latest updates.


$ sudo percona-release setup ppg17
Install packages¶

Install using meta-package
Install packages individually
The meta package enables you to install several components of the distribution in one go.


$ sudo yum install percona-ppg-server17

Start the service¶
After the installation, the default database storage is not automatically initialized. To complete the installation and start Percona Distribution for PostgreSQL, initialize the database using the following command:


$ /usr/pgsql-17/bin/postgresql-17-setup initdb
Start the PostgreSQL service:


$ sudo systemctl start postgresql-17
Check the Percona Distribution for PostgreSQL version:


$ psql --version
Sample output
Congratulations! Your Percona Distribution for PostgreSQL is up and running.


Install Percona Distribution for PostgreSQL on Debian and Ubuntu¶
This document describes how to install Percona Server for PostgreSQL from Percona repositories on DEB-based distributions such as Debian and Ubuntu. Read more about Percona repositories.

Preconditions¶
Debian and other systems that use the apt package manager include the upstream PostgreSQL server package postgresql-17 by default. The components of Percona Distribution for PostgreSQL 17 can only be installed together with Percona Server for PostgreSQL (percona-postgresql-17). If you wish to use Percona Distribution for PostgreSQL, uninstall the postgresql-17 package provided by your distribution and then install the chosen components from Percona Distribution for PostgreSQL.
Install curl for Telemetry. We use it to better understand the use of our products and improve them. To install curl, run the following command:


$ sudo apt install curl
Procedure¶
Run all the commands in the following sections as root or using the sudo command:

Configure Percona repository¶
Install the percona-release repository management tool to subscribe to Percona repositories:

Fetch percona-release packages from Percona web:


$ wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
Install the downloaded package with dpkg:


$ sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
Refresh the local cache:


$ sudo apt update
Enable the repository

Percona provides two repositories for Percona Distribution for PostgreSQL. We recommend enabling the Major release repository to timely receive the latest updates.


$ sudo percona-release setup ppg-17
Install packages¶

Install using meta-package
Install packages individually
The meta package enables you to install several components of the distribution in one go.


$ sudo apt install percona-ppg-server-17

Start the service¶
The installation process automatically initializes and starts the default database. You can check the database status using the following command:


$ sudo systemctl status postgresql.service
Check the Percona Distribution for PostgreSQL version:


$ psql --version
Sample output
Congratulations! Your Percona Distribution for PostgreSQL is up and running.

# Install Percona Distribution for PostgreSQL on Debian and Ubuntu

This document describes how to install Percona Server for PostgreSQL from Percona repositories on DEB-based distributions such as Debian and Ubuntu. [Read more about Percona repositories](repo-overview.md).

## Preconditions

1. Debian and other systems that use the apt package manager include the upstream PostgreSQL server package postgresql-{{pgversion}} by default. The components of Percona Distribution for PostgreSQL {{pgversion}} can only be installed together with Percona Server for PostgreSQL (percona-postgresql-{{pgversion}}). If you wish to use Percona Distribution for PostgreSQL, uninstall the postgresql-{{pgversion}}  package provided by your distribution and then install the chosen components from Percona Distribution for PostgreSQL.
2. Install curl for [Telemetry](telemetry.md). We use it to better understand the use of our products and improve them. To install curl, run the following command:

    

{.bash data-prompt="$"}
    $ sudo apt install curl




## Procedure

Run all the commands in the following sections as root or using the sudo command:

### Configure Percona repository {.power-number}

1. Install the percona-release repository management tool to subscribe to Percona repositories:
 
     * Fetch percona-release packages from Percona web:

        

{.bash data-prompt="$"}
        $ wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb



     * Install the downloaded package with dpkg:

        

{.bash data-prompt="$"}
        $ sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb



     * Refresh the local cache:

        

{.bash data-prompt="$"}
        $ sudo apt update



2. Enable the repository

   Percona provides [two repositories](repo-overview.md) for Percona Distribution for PostgreSQL. We recommend enabling the Major release repository to timely receive the latest updates. 

   

{.bash data-prompt="$"}
   $ sudo percona-release setup ppg-{{pgversion}}



### Install packages

=== "Install using meta-package"

    The [meta package](repo-overview.md#percona-ppg-server){:target=”_blank”} enables you to install several components of the distribution in one go.
     
     

{.bash data-prompt="$"}
     $ sudo apt install percona-ppg-server-{{pgversion}}



=== "Install packages individually"

    Run the following commands:
    {.power-number}

     1. Install the PostgreSQL server package:

         

{.bash data-prompt="$"}
         $ sudo apt install percona-postgresql-{{pgversion}}



     2. Install the components:

          Install pg_repack:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-postgresql-{{pgversion}}-repack



          Install pgAudit:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-postgresql-{{pgversion}}-pgaudit



          Install pgBackRest:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-pgbackrest



          Install Patroni:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-patroni



          [Install pg_stat_monitor :octicons-link-external-16:](https://docs.percona.com/pg-stat-monitor/install.html#__tabbed_1_1)


          Install pgBouncer:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-pgbouncer



          Install pgAudit-set_user:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-pgaudit{{pgversion}}-set-user



          Install pgBadger:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-pgbadger



          Install wal2json:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-postgresql-{{pgversion}}-wal2json



          Install PostgreSQL contrib extensions:

          

{.bash data-prompt="$"}
          $ sudo apt install percona-postgresql-contrib



          Install HAProxy

          

{.bash data-prompt="$"}
          $ sudo apt install percona-haproxy


          
          Install pgpool2

          

{.bash data-prompt="$"}
          $ sudo apt install percona-pgpool2



          Install pg_gather


          

{.bash data-prompt="$"}
          $ sudo apt install percona-pg-gather



          Some extensions require additional setup in order to use them with Percona Distribution for PostgreSQL. For more information, refer to [Enabling extensions](enable-extensions.md).

### Start the service

The installation process automatically initializes and starts the default database. You can check the database status using the following command:

{.bash data-prompt="$"}
$ sudo systemctl status postgresql.service



Check the Percona Distribution for PostgreSQL version:

{.bash data-prompt="$"}
$ psql --version



??? example "Sample output"

    

{.text .no-copy}
    psql (PostgreSQL) {{pspgversion}} (Percona Server for PostgreSQL) {{pspgversion}}



Congratulations! Your Percona Distribution for PostgreSQL is up and running.

## Next steps

[Enable extensions :material-arrow-right:](enable-extensions.md){.md-button}

[Connect to PostgreSQL :material-arrow-right:](connect.md){.md-button}
# Install Percona Distribution for PostgreSQL on Red Hat Enterprise Linux and derivatives

This document describes how to install Percona Distribution for PostgreSQL from Percona repositories on RPM-based distributions such as Red Hat Enterprise Linux and compatible derivatives. [Read more about Percona repositories](repo-overview.md).

## Platform specific notes

Depending on what operating system you are using, you may need to enable or disable specific modules to install Percona Distribution for PostgreSQL packages and to resolve dependencies conflicts for its specific components. 

### For Percona Distribution for PostgreSQL packages

=== "CentOS 7"

    Install the epel-release package:

    

{.bash data-prompt="$"}
    $ sudo yum -y install epel-release
    $ sudo yum repolist



=== "RHEL8/Oracle Linux 8/Rocky Linux 8"

    Disable the postgresql  and llvm-toolsetmodules:    

    

{.bash data-prompt="$"}
    $ sudo dnf module disable postgresql llvm-toolset



### For percona-postgresql{{pgversion}}-devel package

You may need to install the percona-postgresql{{pgversion}}-devel package when working with some extensions or creating programs that interface with PostgreSQL database. This package requires dependencies that are not part of the Distribution, but can be installed from the specific repositories:

=== "RHEL8"

    

{.bash data-prompt="$"}
    $ sudo yum --enablerepo=codeready-builder-for-rhel-8-rhui-rpms install perl-IPC-Run -y



=== "Rocky Linux 8"

    

{.bash data-prompt="$"}
    $ sudo dnf install dnf-plugins-core
    $ sudo dnf module enable llvm-toolset
    $ sudo dnf config-manager --set-enabled powertools



=== "Oracle Linux 8"

    

{.bash data-prompt="$"}
    $ sudo dnf config-manager --set-enabled ol8_codeready_builder install perl-IPC-Run -y



=== "Rocky Linux 9"

    

{.bash data-prompt="$"}
    $ sudo dnf install dnf-plugins-core
    $ sudo dnf module enable llvm-toolset
    $ sudo dnf config-manager --set-enabled crb
    $ sudo dnf install perl-IPC-Run -y



=== "Oracle Linux 9"

    

{.bash data-prompt="$"}
    $ sudo dnf config-manager --set-enabled ol9_codeready_builder install perl-IPC-Run -y



### For percona-patroni package

To install Patroni on Red Hat Enterprise Linux 9 and compatible derivatives, enable the epel repository

{.bash data-prompt="$"}
$ sudo yum install epel-release



### For pgpool2 extension

To install pgpool2 on Red Hat Enterprise Linux and compatible derivatives, enable the codeready builder repository first to resolve dependencies conflict for pgpool2.

The following are commands for Red Hat Enterprise Linux 9 and derivatives. For Red Hat Enterprise Linux 8, replace the operating system version in the commands accordingly. 

=== "RHEL 9"

    

{.bash data-prompt="$"}
    $ sudo dnf config-manager --set-enabled codeready-builder-for-rhel-9-x86_64-rpms



=== "Rocky Linux 9"

    

{.bash data-prompt="$"}
    $ sudo dnf config-manager --set-enabled crb



=== "Oracle Linux 9"

    

{.bash data-prompt="$"}
    $ sudo dnf config-manager --set-enabled ol9_codeready_builder



### For PostGIS 

For Red Hat Enterprise Linux 8 and derivatives, replace the operating system version in the following commands accordingly.

=== "RHEL 9"  

    Run the following commands:
    {.power-number}

    1. Install epel repository

        

{.bash data-prompt="$"}
        $ sudo yum install epel-release



    2. Enable the llvm-toolset dnf module

          

{.bash data-prompt="$"}
          $ sudo dnf module enable llvm-toolset



    3. Enable the codeready builder repository to resolve dependencies conflict. 

        

{.bash data-prompt="$"}
        $ sudo dnf config-manager --set-enabled codeready-builder-for-rhel-9-x86_64-rpms



=== "Rocky Linux 9"

    Run the following commands:
    {.power-number}

    1. Install epel repository

        

{.bash data-prompt="$"}
        $ sudo yum install epel-release



    2. Enable the llvm-toolset dnf module

        

{.bash data-prompt="$"}
        $ sudo dnf module enable llvm-toolset



    3. Enable the codeready builder repository to resolve dependencies conflict.

        

{.bash data-prompt="$"}
        $ sudo dnf install dnf-plugins-core
        $ sudo dnf config-manager --set-enabled crb



=== "Oracle Linux 9"

    Run the following commands:
    {.power-number}

    1. Install epel repository

        

{.bash data-prompt="$"}
        $ sudo yum install epel-release



    2. Enable the llvm-toolset dnf module

        

{.bash data-prompt="$"}
        $ sudo dnf module enable llvm-toolset



    3. Enable the codeready builder repository to resolve dependencies conflict.

        

{.bash data-prompt="$"}
        $ sudo dnf config-manager --set-enabled ol9_codeready_builder



=== "RHEL UBI 9"

    Run the following commands:
    {.power-number}

    1. Configure the Oracle-Linux repository. Create the /etc/yum.repos.d/oracle-linux-ol9.repo file to install the required dependencies: 

        

init title="/etc/yum.repos.d/oracle-linux-ol9.repo"
        [ol9_baseos_latest]
        name=Oracle Linux 9 BaseOS Latest ($basearch)
        baseurl=https://yum.oracle.com/repo/OracleLinux/OL9/baseos/latest/$basearch/
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        gpgcheck=1
        enabled=1     

        [ol9_appstream]
        name=Oracle Linux 9 Application Stream ($basearch)
        baseurl=https://yum.oracle.com/repo/OracleLinux/OL9/appstream/$basearch/
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        gpgcheck=1
        enabled=1     

        [ol9_codeready_builder]
        name=Oracle Linux 9 CodeReady Builder ($basearch) - Unsupported
        baseurl=https://yum.oracle.com/repo/OracleLinux/OL9/codeready/builder/$basearch/
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        gpgcheck=1
        enabled=1



    2. Download the right GPG key for the Oracle Yum Repository:    

        

{.bash data-prompt="$"}
        $ wget https://yum.oracle.com/RPM-GPG-KEY-oracle-ol9 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle

    

    3. Install epel repository    

        

{.bash data-prompt="$"}
        $ sudo yum install epel-release

    

    4. Disable the upstream postgresql package:    

        

{.bash data-prompt="$"}
        $ sudo dnf module disable postgresql

    

## Procedure

Run all the commands in the following sections as root or using the sudo command:

### Install dependencies

Install curl for [Telemetry](telemetry.md). We use it to better understand the use of our products and improve them.

{.bash data-prompt="$"}
$ sudo yum -y install curl



### Configure the repository {.power-number}

1. Install the percona-release repository management tool to subscribe to Percona repositories:

    

{.bash data-prompt="$"}
    $ sudo yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm



2. Enable the repository

   Percona provides [two repositories](repo-overview.md) for Percona Distribution for PostgreSQL. We recommend enabling the Major release repository to timely receive the latest updates. 

   

{.bash data-prompt="$"}
   $ sudo percona-release setup ppg{{pgversion}}



### Install packages

=== "Install using meta-package"

     The [meta package](repo-overview.md#percona-ppg-server){:target=”_blank”} enables you to install several components of the distribution in one go.
     
     

{.bash data-prompt="$"}
     $ sudo yum install percona-ppg-server{{pgversion}}



=== "Install packages individually"
    
    Run the following commands:
    {.power-number}

     1. Install the PostgreSQL server package:

         

{.bash data-prompt="$"}
         $ sudo yum install percona-postgresql{{pgversion}}-server



     2. Install the components:

        Install pg_repack:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pg_repack{{pgversion}}



        Install pgaudit:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pgaudit{{pgversion}}



        Install pgBackRest:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pgbackrest



        Install Patroni:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-patroni



        [Install pg_stat_monitor :octicons-link-external-16:](https://docs.percona.com/pg-stat-monitor/install.html#__tabbed_1_1)


        Install pgBouncer:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pgbouncer



        Install pgAudit-set_user:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pgaudit{{pgversion}}_set_user



        Install pgBadger:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pgbadger



        Install wal2json:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-wal2json{{pgversion}}



        Install PostgreSQL contrib extensions:

        

{.bash data-prompt="$"}
        $ sudo yum install percona-postgresql{{pgversion}}-contrib



        Install HAProxy
        
        

{.bash data-prompt="$"}
        $ sudo yum install percona-haproxy


        
        Install pg_gather

        

{.bash data-prompt="$"}
        $ sudo yum install percona-pg_gather



        Install pgpool2

        1. Check the [platform specific notes](#for-pgpool2-extension)
        2. Install the extension

            

{.bash data-prompt="$"}
            $ sudo yum install percona-pgpool-II-pg{{pgversion}}



        Some extensions require additional setup in order to use them with Percona Distribution for PostgreSQL. For more information, refer to [Enabling extensions](enable-extensions.md).

### Start the service

After the installation, the default database storage is not automatically initialized. To complete the installation and start Percona Distribution for PostgreSQL, initialize the database using the following command:

{.bash data-prompt="$"}
$ /usr/pgsql-{{pgversion}}/bin/postgresql-{{pgversion}}-setup initdb



Start the PostgreSQL service:

{.bash data-prompt="$"}
$ sudo systemctl start postgresql-{{pgversion}}



Check the Percona Distribution for PostgreSQL version:

{.bash data-prompt="$"}
$ psql --version



??? example "Sample output"

    

{.text .no-copy}
    psql (PostgreSQL) {{pspgversion}} (Percona Server for PostgreSQL) {{pspgversion}}


    
Congratulations! Your Percona Distribution for PostgreSQL is up and running.

## Next steps

[Enable extensions :material-arrow-right:](enable-extensions.md){.md-button}

[Connect to PostgreSQL :material-arrow-right:](connect.md){.md-button}