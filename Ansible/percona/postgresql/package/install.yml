---
- name: Install Percona PostgreSQL on multiple OS
  hosts: all
  become: true
  vars_files:
    - ../vars.yml

  tasks:

    - name: Ensure curl is installed
      package:
        name: curl
        state: present

    - name: Disable PostgreSQL module
      command: dnf module disable postgresql -y
      when: ansible_facts['os_family'] | lower in os_family_rpm
      register: disable_postgresql
      failed_when: disable_postgresql.rc != 0

    - name: Clear and rebuild DNF cache
      when: ansible_facts['os_family'] | lower in os_family_rpm
      block:
        - name: Clear DNF cache
          command: dnf clean all

        - name: Rebuild DNF cache
          command: dnf makecache

    - name: Install dependencies for RPM-based systems
      when: ansible_facts['os_family'] | lower in os_family_rpm
      block:

        - name: Enable EPEL repository
          yum:
            name: epel-release
            state: present
        
        - name: Install DNF plugins
          yum:
            name: dnf-plugins-core
            state: present

        - name: Enable necessary repositories dynamically
          block:
            - name: Enable PowerTools repository for Rocky Linux 8
              command: dnf config-manager --set-enabled powertools
              when: ansible_facts['distribution'] | lower == 'rocky' and ansible_facts['distribution_major_version'] == '8'

            - name: Enable CRB repository for Rocky Linux 9
              command: dnf config-manager --set-enabled crb
              when: ansible_facts['distribution'] | lower == 'rocky' and ansible_facts['distribution_major_version'] == '9'

            - name: Enable CodeReady Builder repository for RHEL
              command: dnf config-manager --set-enabled codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-x86_64-rpms
              when: ansible_facts['distribution'] | lower == 'rhel'

            - name: Enable CodeReady Builder repository for Oracle Linux
              command: dnf config-manager --set-enabled codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-x86_64-rpms
              when: ansible_facts['distribution'] | lower == 'oracle'

            - name: Enable CodeReady Builder repository for CentOS
              command: dnf config-manager --set-enabled codeready-builder-for-rhel-{{ ansible_distribution_major_version }}-x86_64-rpms
              when: ansible_facts['distribution'] | lower == 'centos'

        - name: Enable llvm-toolset module dynamically
          command: dnf module enable llvm-toolset -y
          when: ansible_facts['distribution'] | lower in ['rocky', 'rhel', 'centos', 'oracle']

    - name: Add Percona repository for DEB-based systems
      when: ansible_facts['os_family'] | lower in os_family_deb
      block:
        - name: Download Percona release package
          get_url:
            url: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release }}_all.deb"
            dest: "/tmp/percona-release_latest_{{ ansible_distribution_release }}_all.deb"

        - name: Install Percona release package
          command: dpkg -i /tmp/percona-release_latest_{{ ansible_distribution_release }}_all.deb

        - name: Update apt cache
          apt:
            update_cache: true

        - name: Enable Percona repository
          command: percona-release setup ppg-{{ percona_pg_version }}

    - name: Add Percona repository for RPM-based systems
      when: ansible_facts['os_family'] | lower in os_family_rpm
      block:
        - name: Install Percona release package
          yum:
            name: "https://repo.percona.com/yum/percona-release-latest.noarch.rpm"
            state: present

        - name: Enable Percona repository
          command: percona-release setup ppg{{ percona_pg_version }}

    - name: Install Percona PostgreSQL
      package:
        name: 
          - "percona-ppg-server-{{ percona_pg_version }}"
        state: present

    - name: Initialize PostgreSQL database on RPM systems
      when: ansible_facts['os_family'] | lower in os_family_rpm
      command: "/usr/pgsql-{{ percona_pg_version }}/bin/postgresql-{{ percona_pg_version }}-setup initdb"

    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started
        enabled: true

    - name: Check PostgreSQL version
      command: "psql --version"
      register: postgres_version_output

    - name: Print PostgreSQL version
      debug:
        msg: "{{ postgres_version_output.stdout }}"