---
- name: Set up PMM monitoring for PostgreSQL
  hosts: postgres_servers
  become: yes
  vars_files:
    - vars.yml

  tasks:
    - name: Create PMM user in PostgreSQL
      postgresql_user:
        name: "{{ pmm_user }}"
        password: "{{ pmm_password }}"
        role_attr_flags: "SUPERUSER"
      become_user: postgres

    - name: Update pg_hba.conf to allow PMM local connections
      lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        line: "local   all             {{ pmm_user }}                                md5"
      notify: Reload PostgreSQL

    - name: Install postgresql-contrib package (Debian-based)
      ansible.builtin.apt:
        name: postgresql-contrib
        state: present
      when: ansible_os_family == "Debian"

    - name: Install postgresql-contrib package (Red Hat-based)
      ansible.builtin.yum:
        name: postgresql-contrib
        state: present
      when: ansible_os_family == "RedHat"

    - name: Enable pg_stat_statements extension
      postgresql_query:
        db: postgres
        query: "CREATE EXTENSION IF NOT EXISTS pg_stat_statements SCHEMA public;"
      become_user: postgres

    - name: Configure PostgreSQL for pg_stat_statements
      lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        line: "{{ item }}"
      loop:
        - "shared_preload_libraries = 'pg_stat_statements'"
        - "track_activity_query_size = 2048"
        - "pg_stat_statements.track = all"
        - "track_io_timing = on"
      notify: Restart PostgreSQL

    - name: Add PostgreSQL instance to PMM server
      command: >
        pmm-admin add postgresql
        --username={{ pmm_user }}
        --password={{ pmm_password }}
        --server-url=https://{{ pmm_server_user }}:{{ pmm_server_password }}@{{ pmm_server_address }}
        --server-insecure-tls
        --service-name=postgresql-{{ inventory_hostname }}
      register: add_service_output
      changed_when: false

    - name: Display PMM service addition result
      debug:
        msg: "Service addition result: {{ add_service_output.stdout }}"

  handlers:
    - name: Reload PostgreSQL
      command: "psql -c 'select pg_reload_conf()'"
      become_user: postgres

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted